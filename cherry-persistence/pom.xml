<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>cherry-parent</artifactId>
        <groupId>com.hemajoo.commerce.cherry</groupId>
        <version>0.1.0-SNAPSHOT</version>
        <relativePath>../cherry-parent/pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>cherry-persistence</artifactId>

    <name>Cherry - Persistence</name>
    <description>Module providing the persistence layer.</description>

    <properties>
        <db.h2.test.port>9092</db.h2.test.port>
        <flyway.user>sa</flyway.user>
        <flyway.password></flyway.password>
        <flyway.schemas></flyway.schemas>
        <flyway.url>jdbc:h2:tcp://localhost:9092/cherry;DB_CLOSE_ON_EXIT=FALSE</flyway.url>
        <!--        <flyway.locations>filesystem:./cherry-persistence/src/main/resources/db/migration/h2</flyway.locations>-->
        <!--        <flyway.url>jdbc:h2:file:./target/cherry;DB_CLOSE_ON_EXIT=FALSE</flyway.url>-->
        <flyway.locations>classpath:/db/migration/h2</flyway.locations>
    </properties>

    <dependencies>

        <!-- Spring dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Spring Content dependencies -->
        <!-- Spring Content: Allow to expose JPA repositories as REST controllers -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>

        <!-- Spring Content: File System support -->
        <dependency>
            <groupId>com.github.paulcwarren</groupId>
            <artifactId>spring-content-fs-boot-starter</artifactId>
            <version>1.2.4</version>
        </dependency>

        <!-- Tip: Allow to expose JPA repositories as REST controllers -->
        <dependency>
            <groupId>com.github.paulcwarren</groupId>
            <artifactId>spring-content-rest-boot-starter</artifactId>
            <version>1.2.4</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- JUnit dependencies -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Database H2 dependencies -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>

        <!-- Flyway dependencies -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${version.flyway}</version>
        </dependency>

        <!-- Bean mapper: MapStruct -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
        </dependency>

        <!-- Lombok annotation processing for MapStruct -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok-mapstruct-binding</artifactId>
        </dependency>

        <!-- Lombok Core -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Hemajoo Cherry: Common -->
        <dependency>
            <groupId>com.hemajoo.commerce.cherry</groupId>
            <artifactId>cherry-commons</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <!-- Hemajoo Cherry: Data Model -->
        <dependency>
            <groupId>com.hemajoo.commerce.cherry</groupId>
            <artifactId>cherry-model</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <!-- ResseC: Avocado-->
        <dependency>
            <groupId>org.ressec.avocado</groupId>
            <artifactId>avocado-core</artifactId>
        </dependency>

        <!-- Tika -->
        <dependency>
            <groupId>com.github.lafa.tikaNoExternal</groupId>
            <artifactId>tika-core</artifactId>
        </dependency>

    </dependencies>

    <build>

        <plugins>

            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>${version.maven.plugin.flyway}</version>
                <executions>
                    <execution>
                        <id>test-flyway-prepare-db</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>migrate</goal>
                        </goals>
                        <configuration>
                            <user>${flyway.user}</user>
                            <password>${flyway.password}</password>
                            <schemas>
                                <schema>${flyway.schemas}</schema>
                            </schemas>
                            <url>${flyway.url}</url>
                            <locations>${flyway.locations}</locations>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <user>${flyway.user}</user>
                    <password>${flyway.password}</password>
                    <schemas>
                        <schema>${flyway.schemas}</schema>
                    </schemas>
                    <url>${flyway.url}</url>
                    <locations>${flyway.locations}</locations>
                </configuration>
            </plugin>

            <!-- SUREFIRE: The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${version.maven.plugin.surefire}</version>
                <configuration>
                    <skipTests>false</skipTests>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test-h2</id> <!-- Integration tests for H2  -->
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skipTests>false</skipTests>
                            <!-- Include all integration test classes, the ones starting with: IntegrationTest* -->
                            <includes>
                                <include>**/IntegrationTest*.java</include>
                            </includes>
                            <!-- Exclude all unit test classes, the ones starting with: UnitTest* -->
                            <excludes>
                                <exclude>**/UnitTest*.java</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.37.0</version>

                <!-- Build an h2 Docker image for the integration tests. -->
                <configuration>
                    <images>
                        <image>
                            <name>nemerosa/h2:latest</name>
                            <alias>h2-test</alias>
                            <run>
                                <env>
                                    <name>nemerosa-test-h2</name>
                                </env>
                                <ports>
                                    <port>${db.h2.test.port}:9082</port>
                                </ports>
                                <wait>
                                    <time>1000</time>
                                </wait>
                            </run>
                        </image>
                    </images>
                </configuration>

                <executions>
                    <execution>
                        <id>docker-h2-start-container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>docker-h2-stop-container</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>

        </plugins>
    </build>

    <profiles>
        <profile>
            <!--Sonar analysis executed only if profile 'sonar' is active -->
            <id>sonar</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.sonarsource.scanner.maven</groupId>
                        <artifactId>sonar-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sonar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>